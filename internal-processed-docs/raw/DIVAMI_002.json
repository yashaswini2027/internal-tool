{
  "document_id": "DIVAMI_002",
  "raw_text": "# Advanced Git\n## Exercise One - Under The Hood of a Simple Commit\n\n### Overview\nIn this exercise, we'll create a simple commit, and then peek under the hood at the objects stored in our `.git` folder to gain some insight into how things work.\n\n### Prerequisite\nIf you have a Mac with `brew` set up, install `tree`. This makes it easy to visualize the contents of your `.git` folder.\n\n### Exercise\n1. Create a new folder and initialize it as a git repo\n2. Create a file, stage it, and commit it to your new repo\n3. Look at your `.git` folder, using `tree` if you have it\n4. Inspect the objects in your `.git/objects` folder using `git cat-file`. See if you can find the tree, blob, and commit objects for your recent commit.\n5. Look at your `.git/HEAD` and `.git/refs/heads/master` files and see if you can figure out where these references are pointing to.\n\n## Solutions\n\n### Step 1 - Initialize the Repo\nCreate a new sample project folder. Run `git status` to see that it is not yet a git repository. Use `git init` to initialize it as a repository.\n\n```\n$> mkdir -p ~/projects/sample\n\n$> cd ~/projects/sample\n\n$> git status\nfatal: Not a git repository (or any of the parent directories): .git\n\n$> git init\nInitialized empty Git repository in /Users/nnja/projects/sample/.git/\n```\n\n### Step 2 - First Commit\nCreate a new document, stage it for a commit, then commit it to your repository.\n\n```\n$> echo 'Hello World!' > hello.txt\n\n$> git add hello.txt\n\n$> git commit -m \"Initial commit\"\n[master (root-commit) aceb9e8] Initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 hello.txt\n```\n\n### Step 3 - View the .git Folder\nUsing `tree`, look in your `.git/objects` folder, you should now see three objects, represented by long SHA1 hashes. These represent the tree, blob, and commit that we created in the last step.\n\n```\n$> tree .git\n\n.git\n├── COMMIT_EDITMSG\n├── HEAD\n├── config\n├── description\n├── index\n├── info\n│   └── exclude\n├── logs\n│   ├── HEAD\n│   └── refs\n│       └── heads\n│           └── master\n├── objects\n│   ├── 43\n│   │   └── 388fee19744e8893467331d7853a6475a227b8\n│   ├── 58\n│   │   └── 1caa0fe56cf01dc028cc0b089d364993e046b6\n│   ├── 98\n│   │   └── 0a0d5f19a64b4b30a87d4206aade58726b60e3\n│   ├── info\n│   └── pack\n└── refs\n    ├── heads\n    │   └── master\n    └── tags\n```\n\n### Step 4 - Inspect the Objects:\nNote: The SHA1 hash for your commit will be different than the one displayed here. The SHA1 hash for your `blob` and `tree` will be the same as mine, as long as the content is the same.\n\nOne of the objects should be a tree object. The tree contains the filename `hello.txt` and a pointer to the blob.\n\n```\n$> git cat-file -t 581caa\ntree\n\n$> git cat-file -p 581caa\n100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3\thello.txt\n```\n\nThe blob object, pointed to by the tree, contains the contents of the file `hello.txt`\n\n```\n$> git cat-file -t 980a0d5\nblob\n\n$> git cat-file -p 980a0d5\nHello World!\n```\n\nThe commit object contains a pointer to the tree, along with metadata for the commit, such as the author and commit message.\n\n```\n$> git cat-file -t 43388f\ncommit\n\n$> git cat-file -p 43388f\ntree 581caa0fe56cf01dc028cc0b089d364993e046b6\nauthor Nina Zakharenko <nina@nnja.io> 1507168309 -0700\ncommitter Nina Zakharenko <nina@nnja.io> 1507168309 -0700\n\nInitial commit\n```\n\nBecause this is our very first commit, it doesn't have a parent. The next commit we make will point to our initial commit as the parent. \n\n### Step 5 - Look at refs\n\nLet's look under the hood at our `HEAD` variable. `HEAD` is just git's pointer to \"where you are now,\" usually referring to the current branch. More on this later. We can see that right now, it points to our current branch - `master`\n\nNow, if we look at our `master` reference, we can see that it points to the latest commit.\n\n```\n$> cat .git/HEAD\nref: refs/heads/master\n\n$> cat .git/refs/heads/master\n43388fee19744e8893467331d7853a6475a227b8\n```\n`43388f...` is the hash of the commit we saw in the last step. You can confirm this by running `git log`\n\n```\n$> git log --oneline\n43388f Initial commit\n```\n\nGit stores references in the `.git/refs/heads/` directory, and the `HEAD` pointer in `.git/HEAD`\n\nWe can verify this by creating a new branch.\n\n```\n$> git branch new_branch\n```\n\nThe `git branch` command will create a new branch without switching to it.\n\nNow, if we look in `.git/refs`, we'll see two branches. The `master` branch, which is created by default, and `new_branch`.\n\n```\n$> tree .git/refs\n.git/refs\n├── heads\n│   ├── master\n│   └── new_branch\n└── tags\n\n```\n\n#### End of Exercise One"
}